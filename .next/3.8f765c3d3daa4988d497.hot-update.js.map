{"version":3,"sources":["webpack:///./src/components/Applications/ListOfApplicationsPage/index.js?6185","webpack:///./src/redux/applications/index.js?8731","webpack:///./src/redux/sagas/index.js?a074","webpack:///./src/redux/store/index.js?ee0a"],"names":["ListOfApplicationsPage","props","activeCreateMode","hideCreateMode","createApplicationAction","clients","stocks","showCreateMode","applications","propTypes","PropTypes","array","isRequired","getApplicationsAction","func","bool","getClientsAction","getStocksAction","compose","connect","getApplicationsWithFullDataSelector","state","getClientsSelector","getStocksSelector","withStateHandlers","lifecycle","componentDidMount","getApplicationsSaga","createApplicationSaga","defaultState","call","api","getApplicationsFromServer","result","put","getApplicationsSuccessAction","action","createApplication","payload","createApplicationSuccessAction","createAction","values","newApplication","getApplicationsSelector","applicationsReducer","createSelector","map","id","application","client","getClientByIdSelector","clientId","stockIds","getStockById","stockId","handleActions","data","actions","rootSaga","takeEvery","takeLatest","reducers","combineReducers","menuReducer","stocksReducer","clientsReducer","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run"],"mappings":"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","file":"3.8f765c3d3daa4988d497.hot-update.js","sourcesContent":["// Import libraries\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"antd\";\nimport { compose, lifecycle, withStateHandlers } from \"recompose\";\n\n// Import selectors and actions\nimport {\n  getApplicationsWithFullDataSelector,\n  getApplicationsAction,\n  createApplicationAction\n} from \"../../../redux/applications\";\nimport { getClientsAction, getClientsSelector } from \"../../../redux/clients\";\nimport { getStocksAction, getStocksSelector } from \"../../../redux/stocks\";\n\n// Import components\nimport HeaderWithActions from \"../../Layout/MainContent/HeaderWithActions\";\nimport TableWithApplications from \"./TableWithApplications\";\nimport FormOfCreateApplication from \"./FormOfCreateApplication\";\n\nconst ListOfApplicationsPage = props =>\n  props.activeCreateMode ? (\n    <div>\n      <HeaderWithActions\n        title=\"Создание заявки\"\n        actions={[\n          <Button key=\"add\" type=\"primary\" onClick={props.hideCreateMode}>\n            Перейти к списку\n          </Button>\n        ]}\n      />\n      <FormOfCreateApplication\n        createApplicationAction={props.createApplicationAction}\n        clients={props.clients}\n        stocks={props.stocks}\n      />\n    </div>\n  ) : (\n    <div>\n      <HeaderWithActions\n        title=\"Заявки\"\n        actions={[\n          <Button key=\"add\" type=\"primary\" onClick={props.showCreateMode}>\n            Создать заявку\n          </Button>\n        ]}\n      />\n      <TableWithApplications applications={props.applications} />\n    </div>\n  );\n\nListOfApplicationsPage.propTypes = {\n  applications: PropTypes.array.isRequired,\n  getApplicationsAction: PropTypes.func.isRequired,\n  activeCreateMode: PropTypes.bool.isRequired,\n  showCreateMode: PropTypes.func.isRequired,\n  hideCreateMode: PropTypes.func.isRequired,\n  createApplicationAction: PropTypes.func.isRequired,\n  getClientsAction: PropTypes.func.isRequired,\n  clients: PropTypes.array.isRequired,\n  getStocksAction: PropTypes.func.isRequired,\n  stocks: PropTypes.array.isRequired\n};\n\nexport default compose(\n  connect(\n    state => ({\n      applications: getApplicationsWithFullDataSelector(state),\n      clients: getClientsSelector(state),\n      stocks: getStocksSelector(state)\n    }),\n    {\n      getApplicationsAction,\n      createApplicationAction,\n      getClientsAction,\n      getStocksAction\n    }\n  ),\n  withStateHandlers(\n    {\n      activeCreateMode: false\n    },\n    {\n      showCreateMode: () => () => ({ activeCreateMode: true }),\n      hideCreateMode: () => () => ({ activeCreateMode: false })\n    }\n  ),\n  lifecycle({\n    componentDidMount() {\n      this.props.getApplicationsAction();\n      this.props.getClientsAction();\n      this.props.getStocksAction();\n    }\n  })\n)(ListOfApplicationsPage);\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Applications/ListOfApplicationsPage/index.js","// Import libraries\nimport { handleActions, createAction } from \"redux-actions\";\nimport { call, put } from \"redux-saga/effects\";\nimport { createSelector } from \"reselect\";\n\n// Import selectors\nimport { getStockById } from \"../stocks\";\nimport { getClientByIdSelector } from \"../clients\";\n\n// Import api\nimport api from \"../../api\";\n\nconst defaultState = [];\n\n// Export sagas\nexport function* getApplicationsSaga() {\n  const result = yield call(api.applications.getApplicationsFromServer);\n\n  yield put(getApplicationsSuccessAction(result));\n}\n\nexport function* createApplicationSaga(action) {\n  const result = yield call(api.applications.createApplication, action.payload);\n\n  yield put(createApplicationSuccessAction(result));\n}\n\n// Export actions\nexport const getApplicationsAction = createAction(\"GET_APPLICATIONS\");\nexport const getApplicationsSuccessAction = createAction(\n  \"GET_APPLICATIONS_SUCCESS\",\n  result => result\n);\n\nexport const createApplicationAction = createAction(\n  \"CREATE_APPLICATION\",\n  values => values\n);\nexport const createApplicationSuccessAction = createAction(\n  \"CREATE_APPLICATION_SUCCESS\",\n  newApplication => newApplication\n);\n\n// Export selectors\nexport const getApplicationsSelector = state => state.applicationsReducer;\n\nexport const getApplicationsWithFullDataSelector = state =>\n  createSelector(getApplicationsSelector(state), applications =>\n    applications.map(application => ({\n      id: application.id,\n      client: getClientByIdSelector(state, application.clientId),\n      stocks: application.stockIds.map(stockId => getStockById(state, stockId))\n    }))\n  );\n\n// Export reducer\nexport const applicationsReducer = handleActions(\n  {\n    [getApplicationsSuccessAction]: (state, action) => action.payload.data,\n    [createApplicationSuccessAction]: (state, actions) => [\n      ...state,\n      actions.payload.data\n    ]\n  },\n  defaultState\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/redux/applications/index.js","// Import libraries\nimport { takeEvery, takeLatest } from \"redux-saga/effects\";\n\n// Import sagas and actions\nimport {\n  getStocksSaga,\n  getStocksAction,\n  createStockSaga,\n  createStockAction\n} from \"../stocks\";\n\nimport {\n  getClientsSaga,\n  getClientsAction,\n  createClientSaga,\n  createClientAction\n} from \"../clients\";\n\nimport {\n  getApplicationsSaga,\n  getApplicationsAction,\n  createApplicationSaga,\n  createApplicationAction\n} from \"../applications\";\n\nexport default function* rootSaga() {\n  // stocks\n  yield takeEvery(getStocksAction, getStocksSaga);\n  yield takeLatest(createStockAction, createStockSaga);\n\n  // clients\n  yield takeEvery(getClientsAction, getClientsSaga);\n  yield takeLatest(createClientAction, createClientSaga);\n\n  // applications\n  yield takeEvery(getApplicationsAction, getApplicationsSaga);\n  yield takeLatest(createApplicationAction, createApplicationSaga);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/redux/sagas/index.js","// Import libraries\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport logger from \"redux-logger\";\n\n// Import sagas\nimport rootSaga from \"../sagas/index\";\n\n// Import reducers\nimport { clientsReducer } from \"../clients\";\nimport { menuReducer } from \"../menu\";\nimport { stocksReducer } from \"../stocks\";\nimport { applicationsReducer } from \"../applications\";\n\nconst reducers = combineReducers({\n  menuReducer,\n  stocksReducer,\n  clientsReducer,\n  applicationsReducer\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(logger, sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n\n\n\n// WEBPACK FOOTER //\n// ./src/redux/store/index.js"],"sourceRoot":""}