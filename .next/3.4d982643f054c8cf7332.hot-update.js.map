{"version":3,"sources":["webpack:///./src/redux/applications/index.js?8731"],"names":["getApplicationsSaga","createApplicationSaga","defaultState","call","api","applications","getApplicationsFromServer","result","put","getApplicationsSuccessAction","action","createApplication","payload","createApplicationSuccessAction","getApplicationsAction","createAction","createApplicationAction","values","newApplication","getApplicationsSelector","state","applicationsReducer","getApplicationsWithFullDataSelector","map","id","application","client","getClientByIdSelector","clientId","stocks","stockIds","getStockById","stockId","handleActions","data","actions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kGAeiBA,mB;mGAMAC,qB;;AArBjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,IAAMC,eAAe,EAArB;;AAEA;AACO,SAAUF,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACgB,wEAAAG,CAAK,qDAAAC,CAAIC,YAAJ,CAAiBC,yBAAtB,CADhB;;AAAA;AACCC,gBADD;AAAA;AAAA,iBAGC,uEAAAC,CAAIC,6BAA6BF,MAA7B,CAAJ,CAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUN,qBAAV,CAAgCS,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACgB,wEAAAP,CAAK,qDAAAC,CAAIC,YAAJ,CAAiBM,iBAAtB,EAAyCD,OAAOE,OAAhD,CADhB;;AAAA;AACCL,gBADD;AAAA;AAAA,iBAGC,uEAAAC,CAAIK,+BAA+BN,MAA/B,CAAJ,CAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMP;AACO,IAAMO,wBAAwB,2EAAAC,CAAa,kBAAb,CAA9B;AACA,IAAMN,+BAA+B,2EAAAM,CAC1C,0BAD0C,EAE1C;AAAA,SAAUR,MAAV;AAAA,CAF0C,CAArC;;AAKA,IAAMS,0BAA0B,2EAAAD,CACrC,oBADqC,EAErC;AAAA,SAAUE,MAAV;AAAA,CAFqC,CAAhC;AAIA,IAAMJ,iCAAiC,2EAAAE,CAC5C,4BAD4C,EAE5C;AAAA,SAAkBG,cAAlB;AAAA,CAF4C,CAAvC;;AAKP;AACO,IAAMC,0BAA0B,SAA1BA,uBAA0B;AAAA,SAASC,MAAMC,mBAAf;AAAA,CAAhC;;AAEA,IAAMC,sCAAsC,SAAtCA,mCAAsC;AAAA,SACjDF,MAAMC,mBAAN,CAA0BE,GAA1B,CAA8B;AAAA,WAAgB;AAC5CC,UAAIC,YAAYD,EAD4B;AAE5CE,cAAQ,+EAAAC,CAAsBP,KAAtB,EAA6BK,YAAYG,QAAzC,CAFoC;AAG5CC,cAAQJ,YAAYK,QAAZ,CAAqBP,GAArB,CAAyB;AAAA,eAAW,qEAAAQ,CAAaX,KAAb,EAAoBY,OAApB,CAAX;AAAA,OAAzB;AAHoC,KAAhB;AAAA,GAA9B,CADiD;AAAA,CAA5C;;AAOP;AACO,IAAMX,sBAAsB,4EAAAY,uDAE9BxB,4BAF8B,EAEC,UAACW,KAAD,EAAQV,MAAR;AAAA,SAAmBA,OAAOE,OAAP,CAAesB,IAAlC;AAAA,CAFD,mCAG9BrB,8BAH8B,EAGG,UAACO,KAAD,EAAQe,OAAR;AAAA,sCAC7Bf,KAD6B,IAEhCe,QAAQvB,OAAR,CAAgBsB,IAFgB;AAAA,CAHH,oBAQjChC,YARiC,CAA5B;;;;;;;;;;;;0BA1CDA,Y;0BAGWF,mB;0BAMAC,qB;0BAOJa,qB;0BACAL,4B;0BAKAO,uB;0BAIAH,8B;0BAMAM,uB;0BAEAG,mC;0BAQAD,mB","file":"3.4d982643f054c8cf7332.hot-update.js","sourcesContent":["// Import libraries\nimport { handleActions, createAction } from \"redux-actions\";\nimport { call, put } from \"redux-saga/effects\";\nimport { createSelector } from \"reselect\";\n\n// Import selectors\nimport { getStockById } from \"../stocks\";\nimport { getClientByIdSelector } from \"../clients\";\n\n// Import api\nimport api from \"../../api\";\n\nconst defaultState = [];\n\n// Export sagas\nexport function* getApplicationsSaga() {\n  const result = yield call(api.applications.getApplicationsFromServer);\n\n  yield put(getApplicationsSuccessAction(result));\n}\n\nexport function* createApplicationSaga(action) {\n  const result = yield call(api.applications.createApplication, action.payload);\n\n  yield put(createApplicationSuccessAction(result));\n}\n\n// Export actions\nexport const getApplicationsAction = createAction(\"GET_APPLICATIONS\");\nexport const getApplicationsSuccessAction = createAction(\n  \"GET_APPLICATIONS_SUCCESS\",\n  result => result\n);\n\nexport const createApplicationAction = createAction(\n  \"CREATE_APPLICATION\",\n  values => values\n);\nexport const createApplicationSuccessAction = createAction(\n  \"CREATE_APPLICATION_SUCCESS\",\n  newApplication => newApplication\n);\n\n// Export selectors\nexport const getApplicationsSelector = state => state.applicationsReducer;\n\nexport const getApplicationsWithFullDataSelector = state =>\n  state.applicationsReducer.map(application => ({\n    id: application.id,\n    client: getClientByIdSelector(state, application.clientId),\n    stocks: application.stockIds.map(stockId => getStockById(state, stockId))\n  }))\n\n// Export reducer\nexport const applicationsReducer = handleActions(\n  {\n    [getApplicationsSuccessAction]: (state, action) => action.payload.data,\n    [createApplicationSuccessAction]: (state, actions) => [\n      ...state,\n      actions.payload.data\n    ]\n  },\n  defaultState\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/redux/applications/index.js"],"sourceRoot":""}